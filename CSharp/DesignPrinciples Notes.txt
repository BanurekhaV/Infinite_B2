Software Engineering Principles :

1. Seperation of Concern
2. Modularization 
3. Abstractions -(what rather than how)
4. Anticipation of Changes :
     - Genarality (non-coupled/de-coupled)
     - Incremental Development 
     - Consistency of Look and Feel
5. DRY : Do Not Repeat Yourself
6. KISS : Keep it Simple Stupid
7. YAGNI: You Aren't Gonna Need It (Avoid Features and Functions that are not required)
8. SOLID : Are Design Principles

S : Single Responsibility Principle (SRP): Every class or a structure in the code should always have only one job to do

O : Open Close principle (OCP) :A s/w module or a class is open to extension but closed for modification

L : Liskov Substitution Principle (LSP) : It is an extionsion of OCP, where derived classes extend the base class without changing the behaviour of the base class (Usage of Interface Methods)

I : Interface Seggregation Principle (ISP) : Clients should not be forced to implement interfaces that they do not want. Instead of one fat interface, many small/thin interfaces, based on set of methods, each one serving a single purpose

D : Dependency Inversion Principle (DIP) : States that high level modules/classes (consuming class) should not depend on the low level modules/class (concrete implementing class). Both should depend on Abstraction (layered architecture)

 DIP as a design principle suggests a solution to the dependency problem, but does not say how or the techniques for the same

Inversion of Control (Ioc) :is the actual mechanism that allows high level components to depend on the abstraction rather than the low level 

"Inversion of Control" is a principle, and DI is Implementation

Dependency Injection (DI) : is the design pattern to inject concrete implemention of the low level component into the high level component

Ioc Container : is a programming framework that provides automatic DI of the components. It is also responsible for
   1. Registration of a specific dependency type
   2. Resolution : Creating and injection the dependency object into the actual requesting class
   3. Disposition : Managing the lifetime of the dependencies

DI can be used in the below manner :
1. Constructor Injection : Instance of the dependency type can be passed as an argument to the constructor of the dependant class

2. Method Injection : Instance of the dependency type can be passed as an argument to the method of the dependant class

3. Property Injection : Instance of the dependency type can be injected to the specific property

Software Design Patterns : 4 authors of the book named " Elements of Reusable Object Oriented Software were the ones, who had brought the concepts of Design Pattern. They are generally refereed to as GOF(Gang of Four) - Erich Gamma, Ralph, John, Richard Helm

Design patterns are documented and tested solutions for recurring problems during development. These design patterns solve the problems of Object Creation and integration :
   1. Object Creation and initialization, structural changes of classes and interfaces, Relationships between objects, Communication between objects. Based on these requirements, we broadly have 3 patterns

1. Creational Design Pattern : (Object Creation and Initialization)
 
   Eg :  Singleton, Factory, AbstractFactory, Builder,Prototype, Fluent Interface, Factory Method Pattern

2. Structural Design Pattern :(changes of classes and interfaces, Relationships between classes)

Eg: Adapter,Composite, Proxy, Bridge, Decorator

3. Behavioural Design Pattern : (Communication between objects)

Eg : Observer, Iterator, Command, Interpreter 

SingleTon Pattern : Declaring a class with private parameter less constructor 
 Declaring the class as sealed class
 Declare private static variables,fields
 Declare other public property, methods etc

//Note: If we do not make our dependency class as sealed, then there are possibilities of derivation inside the parent class, even though the constructor of the parent is private(). This will create multiple instances of the parent class violating the Singleton pattern. Hence make the class sealed

Comparision between Static class and Singleton

Static                vs             		    Singleton
- Is a class                         		  	 - is a Design pattern
- static constructor                 		  	 - private constructor
- Cannot inherit by default         		  	 - Unless we use the sealed modifier, it can be inherited 
- cannot pass the static class object as a parameter     - We can pass the dependency class object as a parameter
- has only one instance                                  - has only one instance                 


Factory Pattern : As GOF, factory is an object used to create other objects. In technical terms, factory is a class with a method. This method is used to create and return other objects based on the input received.

This design creates and initializes the object without exposing the logic of creation to the client


Factory Method : Creating an abstract factory and initializing the object

Abstract factory Pattern : Grouping of common themed objects under a factory

DI pattern: 

Layered Arch :

 User Interface (UI)
 Business Logic - Business Access layer (BAL)
 Data Layer - Data Access Layer (DAL)

DI thru Unity Ioc Framework:
- Tools->Nuget Package Manager -> Manage nuget Packages for Solution>

In the Dialog box that opens up, go to browse and type unity.ioc.framework
- Select the package and click install and wait for the installation by giving required approvals (click ok)
- After Installation, we are ready to work with the Unity Ioc container
- Create Ioc object, 
- Register the service types. 
- Resolve the Dependencies
- start calling the methods


Pros and Cons of Dependency Injection

Pros : Isolation (both for testing and developing)
       Explicit defining of dependency class
       Facilitating Good Design
       Quick Switching of implementations

Cons : Increased number of classes
       Creation of many Interfaces


