Inheritance Types : 1. Single, 2. MultiLevel, 3. Hierarchial, 4. Hybrid
Inheritance Options: 'Is a Relationship'
            Eg : Circle is a Shape
                 Car is a Vehicle
                 
               'Has a Relationship' - aggregation/composition 
            Eg : Car has an Engine 
                 Humans have Heart


Interface : Interfaces are like classes, which contains properties, methods, delegates, events etc - but only declarations and no implementation
 - Interface members are public by default
 - They do not allow explicit modifiers
 - A class can inherit from one or more Interfaces
 - An interface can inherit from other interfaces
 - The class that inherits from an interface, will have to provide implementation to all the members of the interface
 - The class that inherits form one interface and if that interface has its own oarent, then the class will have to implement all the methods of its base, and the base's base. Interface Chaining
 - We cannot instantiate an instance of an interface, but we can create objects and refer to the derived class/classes

Advantages of Interfaces :
   - Loose coupling
   - Total abstraction
   - component-based programming
   - They act like plug and play features of the application
 
Explicit Implementation of Interface Methods :
Property Implementation in Interface :

      
Types of classes :
  - Normal Class - Can be inherited, instantiated, can have a combination of static and non-static members
 
 - static class - cannot be inherited and cannot be instantiated
                   should have all static members only
                   Accessing the members using the class name

Eg :

static class myStatic
    {
        public static int x;
        static string  y;
        static float  f;

       public static void Method1()
        {

        }
        static myStatic()
        {

        }

    }

- Sealed Class - Can be instantiated but cannot be inherited. It is like a final /concrete class. Does not allow extension

Eg : 
sealed class MySeal
    {
        public string sealeddata;

        public void sealedMethod()
        {

        }

        public MySeal() { }
    } 

- Partial Class - Are classes that are defined in Multiple Files, to enable multiple developers to work simultaneously

  Eg : the below class can be available in different files

 public partial class OurProject
    {

    }

 - Abstract Class - Classes that can be inherited, but cannot be instantiated
                - Can have both abstract and non-abstract methods
                - If a class has atleast one abstract method, then the class has to be declared abstract
                - The derived class/classes have to implement the abstract method using 'override' keyword

  Eg :

   abstract class myAbstract
    {
        void Mymethod()
        {

        }
    }

What are Abstract Methods() : Methods that do not have implmentation
   - Methods that are marked as abstract
   - the Class in which we have atleast 1 abstract method will force the class to be declared as abstract class