Co-Variance : enables us to pass a derived type when a base type is expected

Constructor calling and assigning type

    class one { }
    class two : one { }
    class three : two { }

lets consider initialization
  one o1= new one(); possible
  one o2= new two();   ""
  one o3= new three();  ""
  two t1= new two();  ""
  two t2= new three(); ""
  two t3= new one();  not possible

ContraVariance : Method calling and passing arguments

MethodBase(one o) { }

MethodBase(two t)


Properties : are named members of classes, structures, interfaces
   - are extensions of the fields
   - they are accessed using the accessors, through which we can write (set) or read (get) private fields of the class
   - Manual Implementation of the Properties or Automatic Implementation is possible


Indexers : It allows an object to be indexed like an array. It behaves similar to a Virtual Array
 - We can access the indexers using get and set accessors
 - Declaration and behaviour of an Indexer is to some extent similar to properties. However, properties return or set a specific data member, whereas indexers return or set a particular value at a particular reference of an object
 - Indexers are not named members like properties, instead they are referred using the 'this' keyword
 - Indexers can be overloaded


