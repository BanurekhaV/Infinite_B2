Anonymous Methods: Are Methods that do not have any name associated.
  -- In order to call such methods, we use delegates
  -- Delegates are of 3 types
          - Action Delegate : May or may not take parameters
              They do not return any value

   eg:  Action<int> ExampleActionDelegate = delegate (int s)
               {
                   Console.WriteLine(s);
               };
            ExampleActionDelegate(25);

          - Function Delegate : 
              Func is a built-in delegate type
              It must return a value
              Can take between 0 and 16 parameters

    eg: Func<int> getRnumber= delegate()
             { 
                Random r= new Random();
                return r.Next(1, 100);
             };

         int rand=getRnumber();
         cw(rand);

          - Predicate Delegate : Takes one input, and returns a boolean value. 
              Used to filter from list of values
   Eg : Predicate<string> chkupper=delegate(string s)
           {
              return s.Equals(s.ToUpper());
           };
          bool res= chkupper("Hello World");

Events : User-->Events-->Delegates-->Functions
  Works on a Model Publisher/Subscriber

-Event enables a class or an object to notify other class when something occurs/happens

- The class that raises the event is publisher
- The class that handles the event is subscriber

- Publisher determines when an event is raised
- Subscribers subscribe for various publishers
- Subscribers can handle events from multiple publishers

- Events can have multiple subscribers

Events-delegates Association : create events of type delegate(particular) and register them with the class where we are handling the event

Resource Management : Memory Management which is done through Garbage Collection class of the Managed Heap thru an internal engine known as Optimization Engine

GC occurs if atleast one of the multiple conditions is satisfied
  1. If the system has low physical memory
  2. If the memory allocated to various objects in the heap exceeds a particular threshold 
  3. Forceful invocation of the Collect() of the GC

GC has 3 Phases of transition
 1. Marking Phase : A list of all live objects is created
 2. Relocating Phase : The references of all the objects in the live object list will be updated in this phase, so that they can be moved to the next phase
 3. Compacting Phase : Here the compacting of space happens by releasing the memory occupied by the Dead Objects

The Heap memory is organized into 3 generations
  Generation 0 : all short lived and temporary objects
  Generation 1
  Generation 2

Dispose()   vs. Finalize()

Dispose() is usually called by our code. This is the only method inside an IDisposable interface. When we call the Dispose(), the resources allocated are freed immediately. Since we may forget to call dispose(), there is using(){ } statement block that calls the dispose() method at the end of the block automatically


Finalize() : is called by the GC 

Object cloning : Creating duplicates
   Shallow Copy  : Creating a new object and then copying the value type fields of the first object to the new object. For refernce types, only the reference is copied. Hence the first and the clone refer to the same object.

   Deep Copy : Creating a new object and then copying the fields of the current to the new object. For reference type, it creates a complete new reference different from the first object
