Various Interfaces that aid in collections :

IEnumerable is an Interface which has one method called GetEnumerator(). This method returns a type of IEnumerator, which is another interface

IEnumerator has 1 property called current that gives the data at the current position, and 2 fumctions viz MoveNext(), and Reset(). These 2 functions help in navigating the collections. MoveNext() function returns true if there are elements in the collection, else false.

Both the above interfaces are meant for iterating a collection. IEnumerable is simpler than IEnumerator.

IComparable : interface has one method called CompareTo(Object o) that takes an object to compare with and return an int
     0 = both are equal
     -1 = first object is smaller than the second
     1 = first object is larger than the second

IComparer : is another interface used to compare objects. This interface has a method called compare(obj1, obj2) that takes 2 objects and return an int as above

is and as statements

is =  a is b ? = checking if a and b are same
as = a as b = making a as a b type


Equality Operations : ==, Equals(), ReferenceEquals, CompareTo

== operator and Equals() function check for the values

ReferenceEquals() checks for instance references

Delegates :  Are similar to function pointers of C/C++.
 - Are reference types that holds the reference to a function/method, that can be changed at runtime
 - Are used for implementing events and call backs
 - It encourages abstraction
 - Declaration of delegates with signature determines the method whose reference it can hold (The signatures of both the delegate as well as the dunction should match)

Delegates can be passed to functions as arguments
Delegates can be created as generic delegates
Delegates ensure polymorphism