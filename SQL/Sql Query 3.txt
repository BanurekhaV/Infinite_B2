use infinitedb

select * from tblEmployee

--subqueries (query within a query)
--All employee names who earn more than Hannah
--1. find out what hannah's salary
--2. find all employees salary > hannah
select salary from tblEmployee where ename like 'Hannah'
select ename from tblEmployee where salary > 6800

--using subquery for the above question
select ename, salary from tblemployee   -- main query that makes use of the output from inner query
where salary > 
               (select salary from tblEmployee   -- inner query that executes first
			   where ename like 'Hannah')

--multi row subquery
--find all employees and their salaries who earn more than all the employees of dept 2
select ename ,salary from tblEmployee
where salary >all (select salary from tblemployee where deptid=2)

--find all employees and their salaries who earn less than all the employees of dept 2
select ename ,salary from tblEmployee
where salary <all (select salary from tblemployee where deptid=2)

--find all employees and their salaries who earn more than any of the employees of dept 2
select ename ,salary from tblEmployee
where salary >any (select salary from tblemployee where deptid=2)

--find all employees and their salaries who earn less than any of the employees of dept 2
select ename ,salary from tblEmployee
where salary <any (select salary from tblemployee where deptid=2)

--find all employees and their salaries who earn equal to that of the employees of dept 2
select ename ,salary from tblEmployee
where salary in (select salary from tblemployee where deptid=1)

--multiple subquery
-- display the names,job and salary of employees where the job is that of 7900 (clerk)
 -- and salary greater than that of 7369 (800)

/* select ename,job,salary
from employee where job = (select job from employee where empno=7900)
and salary > (select salary from employee where empno=7369)

select ename,job,salary from employee where job='clerk' and salary >800

--nested sub query
--display the name, job and salary of all employees who are having the job as that of Smith
select ename,job,salary
from employee where job = (select job from employee where empno = 
                                           (select empno from employee where ename='Smith'))

--list department wise minimum salary which are greater than dept no 20
select deptno, min(salary) from employee 
group by deptno
having min(salary)>(select min(salary) from employee where deptno=20)
order by deptno desc

--find the list of employees who earn less than any manager, but they should not be a manager

select ename,job,salary from employee 
where sal <any (select sal from employee where job like 'M%') and job <>'Manager'


--case in sql
create table casetable(cid int, casename varchar(20))

insert into casetable values(5,'White'),(2,'Blue'),(3,'Green'),(4,'Yellow')
select * from casetable

--simple case without else
select cid, casename,
case casename  
   when 'Red' then 'Danger'
   when 'Blue' then 'Primary'
   when 'Green' then 'Success'
end as remarks
from casetable

--simple case with else
select cid, casename,
case casename  
   when 'Red' then 'Danger'
   when 'Blue' then 'Primary'
   when 'Green' then 'Success'
   else 'Alert'
end as colors
from casetable
  
--searched case w/o else

select cid, casename,
case
   when casename='Red' then 'Danger'
   when casename='Blue' then 'primary'
   when casename='Green' then 'Success'
end 'Color descriptions' from casetable

--searched case with else

select cid, casename,
case
   when casename='Red' then 'Danger'
   when casename='Blue' then 'primary'
   when casename='Green' then 'Success'
   else 'Incorrect Color'
end 'Color descriptions' from casetable

select * from tblEmployee

--nested case inside if else

declare @salesmade int, @sal int
set @salesmade=100
select @salesmade as 'Total Sales'
print 'The Total Sales made is' + ' '+ cast(@salesmade as varchar(10))
select @sal=salary from tblemployee where eid=110
print 'Employee - Sonu''s Salary is ' + ' ' + cast(@sal as varchar(10))
if @salesmade>500
  select 'Bumper Sales'
else
  begin
    select case
      when @salesmade between 100 and 200 then 'Poor Sales'
	  when @salesmade between 201 and 300 then 'OK Sales'
	  when @salesmade between 301 and 500 then 'Good Sales'
	else 'No Sales At All'
    end as saladata
 end

 --nested case
 declare @totalsales int
 set @totalsales=100
 select case
    when @totalsales >=500 then 'Bumper Sales'
	when @totalsales <500 then
	 case
        when @totalsales between 101 and 200 then 'Ok Sales'
	    when @totalsales between 201 and 300 then 'Good Sales'
	    when @totalsales between 301 and 500 then 'Very Good Sales'
	   else 'No Sales At All'
	 end
  end as saladata

  --casting/conversions
  select 1+'2'
  select 1+2
  select 1+'a'

  select cast('05-10-2023' as datetime)
  select cast('Helloworld' as datetime)

--TSql
--eg 1
begin
declare @v1 int =50
declare @v2 int =100
declare @sum int
set @sum= @v1 + @v2
print 'The total of v1 and v2 is '+ ' ' + cast(@sum as varchar(10))
select @sum
end

--eg 2

declare @a int;
declare @b int;
set @a=10;
set @b=40
begin
  if(@a > @b)
   print ' a is greater'
  else
   print 'b is greater'
end


--eg 3
--increase the salary of an employee
begin
   declare @esal float
   declare @ename varchar(20)
   select @ename=ename, @esal=salary from tblemployee where eid=105
   print 'Name of the Employee : '+ ' '+ @ename
   print  @ename + ' ' + 'Salary is :' + ' ' +cast(@esal as varchar(10))
   if(@esal <=6500)
     begin
	   set @esal=@esal + 3000
	   print 'Employees Revised Salary is' + '  '+ cast(@esal as varchar(20))
	 end
	 else
	   begin
	    set @esal=@esal+500
		print 'Salary is OK Now'
       end
end

--while 

declare @ctr int=1;
while @ctr<=5
 begin
   print @ctr
   set @ctr=@ctr+1
  end

--continue,break

declare @ctr1 int=0;
while @ctr1<=5
 begin
    set @ctr1=@ctr1+1
	if @ctr1=4
	--break
	continue
   print @ctr1  
  end

  --corelated sub query
  --eg second highest salary
  select * from tblEmployee

  select e.ename, e.salary from tblemployee e
  where 2=(select count(salary) from tblemployee p where p.salary >=e.salary)

  --find all the employees whose salary is greater than the average salary of the department

  select deptid, avg(salary) from tblemployee
  group by deptid

  select e.ename, e.salary from tblemployee e
  where salary > (select avg(salary) from tblemployee p
            where p.DeptId=e.DeptId)

  --we can convert the above corelated subquery using joins
   select e.ename, e.salary from tblemployee e join
   (select deptid, avg(salary) as dept_average from tblemployee
   group by deptid) as t on e.deptid=t.deptid where e.salary > t.dept_average

   --update salary of all employees, whose salary is the lowest in that department
   -- corelated query
   update tblemployee set salary = salary + 100 from tblemployee t1 where salary <=
      (select min(t2.salary) from tblEmployee t2 where t2.deptid=t1.deptid)


  


