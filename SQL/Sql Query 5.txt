
select * from tblemployee where deptid=4 and salary>6000

--procedures with input parameter

--eg 1
create or alter proc getSalary(@empid int)
as
begin
select ename,salary from tblemployee where eid=@empid
end

getsalary 307

--eg 2
create or alter proc getDeptname(@deptid int, @eid int)
as
begin
 select ename from tblemployee where eid=@eid
 select deptname from tblDepartment where deptid=@deptid
 end

 getdeptname 2,108

--procedures with both input and output parameters
--eg 1
create or alter proc GetEmpSalary @ename varchar(20), @sal float output
as
begin
select @sal=salary from tblemployee where ename=@ename
end

--way 1 to execute the procedure with output values
declare @retsal float
execute GetEmpSalary 'nived',@retsal output
print @retsal
select @retsal

--way 2 
declare @returnsal float
execute GetEmpSalary @sal=@returnsal output, @ename='Shilpa'
print @returnsal

--procedures with return parameters
--procedures return only integers
--eg 1
create or alter proc retproc @did int
as
begin
return (select count(eid) from tblemployee where deptid = @did)
end

--to execute procedures with return parameters

declare @empcount int
execute @empcount=retproc 1
print 'Number of Employees in the dept are :' + ' '+cast(@empcount as varchar(3))
select @empcount

--eg 2 to show that procedures cannot return non integer types

create or alter procedure getname @eid int
as
begin
return (select ename from tblemployee where eid=@eid)
end

declare @empname varchar(20)
execute @empname=getname 102
print @empname

--procedures with dml operations
--eg 1
create or alter proc DeleteEmp @eid int
as
begin
select * from tblemployee
delete from tblemployee where eid=@eid 
select * from tblemployee
end

deleteemp 108

--procedure for updation
--eg 2
create or alter proc sp_UpdateEmpSalary
as
begin
update tblemployee set salary=6500 where salary in(6000,6100,6200)
end

sp_updateempsalary

select * from tblEmployee where eid=107

--procedures with t-sql
--eg 1
create or alter proc upd_proc(@increment int, @eid int)
as
begin
declare @newSalary int
set @newSalary=(select salary from tblemployee where eid=@eid)
if(@newSalary <=6800)
 begin
  set @newSalary=@newSalary+@increment
  print 'The revised Salary is :' + ' ' + cast(@newsalary as varchar(8))
 end

 else
  begin
  print ' Salary is good enough'
  end
end

upd_proc 1000, 110

--eg 2 with output parameter
--tax calculation
create or alter proc sp_TaxCalculator(@id int, @AnnualSalary int output)
as
begin
declare @tempsal int
select @tempsal=(salary *12) from tblemployee where eid=@id

if(@tempsal>85000)
 begin
  set @AnnualSalary=@tempsal
 end
 else
  begin
   print 'Salary < 85000'
   end
end


declare @rsal int
declare @taxamt float
exec sp_TaxCalculator 107, @rsal output
set @taxamt=(@rsal*12)/100   -- you may give correct formula
print 'The tax amount to be paid is ' + cast(@taxamt as varchar(10))

--procedure with exception handling
create or alter procedure Err_proc
as
begin
begin try
select salary+ename from tblemployee where eid=109
end try
begin catch
--select 'Error in the procedure'
raiserror(15600,-1,1,'Invalid Operation in Err_proc')
end catch
end

Err_proc

select * from sys.messages where message_id=50000

--user defined error messages

--syntax, call the stored procedure sp_addmessage with message id, severity,'message text'
sp_addmessage 51200, 8, 'Oops ! an error occured'


--procedure with exception handling, transaction, few dml operation etc

create table Products
(
ProductId int Primary key,
ProductName varchar(25),
Price int,
QuantityAvailable int
)

--populate some data into the table
insert into Products values(101,'Laptops',45000,100),
(102,'Desktops',25000,25),
(103,'Tablets',50000,50),
(104,'SmartPhones',80000,60)

--create productsales table to record sales
create table ProductSales
(
ProductSalesId int primary key,
ProductId int references Products(ProductId),
QuantitySold int)

select * from products
select *from ProductSales

--create procedure for the above concepts
create or alter procedure sp_SellingProducts
@Pid int, @qtyto_sell int
as
begin
  --first we need to check if the stock is avilable for the product we want to sell
  declare @stockavailable int
  select @stockavailable=QuantityAvailable 
  from Products where ProductId=@Pid
  --we need to throw an error to the calling application
  --if the stockavailable is less than to qty to sell
  if(@stockavailable<@qtyto_sell)
   begin
    Raiserror('Not Enough Stock to sell',16,1)
   end
  else 
   begin -- we need to start the transaction of inserting into one table and updating the other
   begin transaction
      -- first let us reduce the qty in the products table
	  update products set
	   quantityavailable=(quantityavailable-@qtyto_sell)
	   where ProductId=@Pid
	  --next we need to calculate the max ProductSalesId inorder to insert into the table
	  declare @maxsaleid int
	  select @maxsaleid= case  
	     when max(productsalesid) is null then 0
		 else max(productsalesid)
		 end
		 from productsales
		 --we will increment the value @maxsaleid by 1, so that we dont get a primary key violation error
		 set @maxsaleid = @maxsaleid + 1

		 --now we can insert a row into the productsales table
		 insert into productsales 
		 values(@maxsaleid,@pid,@qtyto_sell)
		 --let us use the global variable @@Error which tracks the recent error occured
		 if(@@ERROR <> 0)
		  begin
		   Rollback transaction
		   print ' Something went wrong .. Rolling back the transaction'
          end
		 else
		  begin
		   commit transaction
		   print 'Transaction Successful'
          end
	end
end

select * from products
select *from ProductSales

update products set quantityavailable =100 where productid=10

delete from products where productid=10

select * from products where productid=10

insert into productsales values(3,10,20)

sp_sellingproducts 10,5  -- will terminate the transaction as the @@Error variable will have
                        -- a number > 0 (FK violation)


--Scalar Functions
--eg 1
create or alter function fn_EmpData(@ename nvarchar(25),@gender nvarchar(10))
returns nvarchar(50)
as
begin
return(select @ename + ' is a ' +@gender)
end

--to execute the above function using 3 part qualifier
select eid, infinitedb.dbo.fn_empdata(ename,Gender) as 'Emp Data' from tblemployee

--to execute the above function using 2 part qualifier
select eid, dbo.fn_empdata(ename,Gender) as 'Emp Data' from tblemployee

--to drop a function
drop function dbo.fn_EmpData

--eg 2
create or alter function fnAdd2Nos(@a int,@b int)
returns int
as
begin
return @a + @b
end

print dbo.fnadd2Nos(10,20)  -- or
select dbo.fnAdd2Nos(20,50)

--eg 3 create a function that calculates the area of a rectangle
create or alter function fn_Area(@length float, @breadth float)
returns float
as
begin
declare @area float
set @area = @length * @breadth
return @area
end

select dbo.fn_Area(6.4,3.2) as 'Area of Rectangle'

--eg 3
create or alter function fn_getAge(@dob date)
returns int
as
begin
declare @age int
set @age=datediff(year,@dob,getdate())-
case 
  when(month(@dob) > month(getdate())) then 1
  else 0
  end
return @age
end

select dbo.fn_getAge('1985/11/20')as Age

--inline table valued functions
--returns a table and is not enclosed within begin and end keywords
--can be used in where and join clause of sql statement

--eg 1
create or alter function fn_GetEmpDetails(@deptid int)
returns table
as
 return (select eid,ename,salary,gender,deptid from tblEmployee
     where DeptId=@deptid)

--ways to execute the above functions
select * from fn_GetEmpDetails(1)

select * from tblDepartment d join fn_GetEmpDetails(2) 
on d.DeptId=fn_GetEmpDetails.DeptId

select d.DeptName,fn_GetEmpDetails.EName,fn_GetEmpDetails.Salary from tbldepartment d join fn_GetEmpDetails(2) 
on d.DeptId=fn_GetEmpDetails.DeptId

--Multi Statement Table valued Function returns a dummy table like structure
--which is encompassed within a begin and end keywords
select * from customers

sp_help customers

create or alter function GetCustomersByCountry(@country varchar(20))
returns 
@CustomersByCountry table
(Cust_Id varchar(10),
Cust_name varchar(30),
City varchar(15),
Country varchar(20))
as
begin
 insert into @CustomersByCountry
 select CustomerID, ContactName,City,Country from customers
 where country=@country

 --to check if rows were selected for a given country
 if @@ROWCOUNT = 0
  begin
   insert into @CustomersByCountry values(' ','No Customers Found',null,null)
   end
   return 
 end

 select * from GetCustomersByCountry('Germany')



