State Management: Managing /Retaining the state of the page (data management)

There are 2 types of statemanagement techniques : 

Client Side  :
  1. ViewState: Is a dictionary object that can store any data. 
                It is a simple variable that does not require typecasting.
                It is stored at the client side
                Can retain values (state of the controls) across multiple postbacks of the same page

Note : All asp controls(server controls) have a viewstate field to retain postback events. This is a serialized base64-encoded strings and is stored in  a hidden field

  2. Hidden Fields: Are controls in the tool box.
                    They are not visible at the runtime and only seen at the design time
                    It is a class and hence needs to be initialized
                    More load on the system
                    Can retain values (state of the controls) across multiple postbacks of the same page

Note : While both ViewState Variables and HiddenField Controls work in the same manner, if we have less data/values to manage state, then may be we can use Hiddenfields. If more data has to be managed, then Viewstate is preferred (performance)
Both are local to the form/page

  3. Cookies: Are used when we want our data to travel across pages. Are of 2 types 
             1. Persistent Cookies : We need to use a HttpCookies class object
             2. Non-Persistent Cookies : no need for the httpcookies object

  4. Query String: Across Pages statemanagement (? %) The data values are passed to other pages over the address bar. It is visible. Hence we should not use query strings to pass sensitive information. UrlEncode to encode the data in a format that overrules any other specific format 

                            
Server Side :
  1. Session State:
  2. Application State:


Inline Code : Refers to the code that is written inside an ASP.Net Web Page that has an extension .aspx. 
-It allows the code to be written along with the Html source using <script> tag or %
- Major point of interest is since it is physically in the .aspx file, it is deployed along with the web form.

Code Behind : Refers to the code that is written as a seperate class file with an extension of aspx.cs
- It code gets compiled into a seperate code file for each .aspx web form
- Major point of obeservation is all these code files are compiled into a Dll file that allows it to be hosted free from any inline server



Cross Page Post back : Can replace the session state management . Used to transfer data from one page to another
